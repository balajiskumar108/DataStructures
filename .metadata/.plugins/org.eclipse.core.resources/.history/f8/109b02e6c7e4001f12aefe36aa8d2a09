package tests;

/*
 * This Node class is provided to you, 
 * 	and you must use it to implement the required class(es) and method(s) in the model package.
 * The StarterTests class in the `tests` package suggests what you need to create in the `model` package.
 * Where the Node class is needed, you must:
 * 	+ Only use the public methods given here.
 *  + Not add any additional attributes or methods in this Node class.
 */

public class Node<E> {
	/*
	 * Do not modify this class. 
	 * When your submission is graded, the same starter version of the Node class will be used,
	 * meaning that if you made any changes to this class, they would be wiped out 
	 * and your submitted classes may just stop compiling.
	 */
	
	private E element;
	private Node<E> next;
	
	/*
	 * Constructor
	 */
	public Node(E e, Node<E> n) {
		element = e;
		next = n;
	}
	
	/*
	 * Accessors
	 */
	public E getElement() {
		return element;
	} 
	
	public Node<E> getNext() {
		return next;
	}
	
	/*
	 * Mutators
	 */
	public void setElement(E e) {
		element = e;
	}
	
	public void setNext(Node<E> n) {
		next = n;
	} 
}

public class ListUtilities {

    public static Node<String> getAllPrefixes(Node<Integer> input, int m, int n) {
        if (input == null || m > n || m < 1) return null;

        Node<String> dummy = new Node<>(null, null);
        Node<String> tail = dummy;
        Node<Integer> current = input;
        StringBuilder sb = new StringBuilder();
        int count = 0;

        while (current != null && count < n) {
            if (count > 0) sb.append(", ");
            sb.append(current.getData());
            count++;

            if (count >= m) {
                tail.setNext(new Node<>("[" + sb.toString() + "]", null));
                tail = tail.getNext();
            }
            current = current.getNext();
        }
        return dummy.getNext();
    }

    public static Node<Integer> getMergedChain(Node<Integer> leftChain, Node<Integer> rightChain) {
        Node<Integer> dummy = new Node<>(null, null);
        Node<Integer> tail = dummy;

        while (leftChain != null && rightChain != null) {
            if (leftChain.getData() <= rightChain.getData()) {
                tail.setNext(new Node<>(leftChain.getData(), null));
                leftChain = leftChain.getNext();
            } else {
                tail.setNext(new Node<>(rightChain.getData(), null));
                rightChain = rightChain.getNext();
            }
            tail = tail.getNext();
        }

        while (leftChain != null) {
            tail.setNext(new Node<>(leftChain.getData(), null));
            tail = tail.getNext();
            leftChain = leftChain.getNext();
        }

        while (rightChain != null) {
            tail.setNext(new Node<>(rightChain.getData(), null));
            tail = tail.getNext();
            rightChain = rightChain.getNext();
        }

        return dummy.getNext();
    }
}
